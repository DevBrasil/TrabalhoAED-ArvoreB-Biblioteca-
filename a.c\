int insereCodigo_termino(FILE *arq, int pai, int pos, int codigo, int pos_dado)
{

    if (pos == -1)
    { //arvore vazia ( Adicionar na raiz)
        noBmais *aux = (noBmais *)malloc(sizeof(noBmais));

        //popular a primeira chave
        aux->numChaves = 1;
        aux->chave[0] = codigo;
        aux->eh_folha = 1;
        aux->pai = -1;
        aux->ponteiro[0] = pos_dado;

        int b;

        for (b = 1; b < ORDEM; b++)
        {
            aux->chave[b] = -1;
            aux->ponteiro[b] = -1;
        }

        aux->ponteiro[ORDEM - 1] = -1;
        aux->ponteiro[ORDEM] = -1;

        Cabecalho_BMais *cab = (Cabecalho_BMais *)malloc(sizeof(Cabecalho_BMais));
        cab = le_cabecalho_codigo(arq);

        if (cab->pos_livre != -1)
        { //tem posicao livre;
            noBmais *livre = (noBmais *)malloc(sizeof(noBmais));
            livre = le_no_codigo(arq, cab->pos_livre); //pega a informacao do no livre
            int pos_livre = cab->pos_livre;            //guarda a posicao do no livre
            cab->pos_livre = livre->eh_folha;          //atualiza a lista de nos livres

            cab->pos_raiz = pos_livre; //atualiza a posicao da raiz

            escreve_no_codigo(arq, aux, pos_livre);
            escreve_cabecalho_codigo(arq, cab);

            free(aux);
            free(livre);
            free(cab);

            return pos_livre;
        }
        else
        { //nao tem posicao livre

            int pos_topo = cab->pos_topo; //guarda a posicao do topo

            escreve_no_codigo(arq, aux, cab->pos_topo);
            cab->pos_raiz = cab->pos_topo;
            cab->pos_topo++;

            escreve_cabecalho_codigo(arq, cab);

            free(aux);
            free(cab);

            return pos_topo;
        }
    }
    else
    { //arvore nao vazia , percorrer e adicionar

        noBmais *no_atual = (noBmais *)malloc(sizeof(noBmais));

        no_atual = le_no_codigo(arq, pos);

        if (no_atual->eh_folha)
        { //adiciona aqui

            if (no_atual->numChaves == ORDEM - 1)
            { //atingiu o limite de chaves

                // == 1- ADICIONAR O ITEM CRIANDO O OVERFLOW ==//

                int i;
                for (i = 0; i < no_atual->numChaves; i++)
                {
                    if (codigo < no_atual->chave[i])
                        break;
                }
                //atualizar o no movendo as casas para seus novos lugares
                for (int j = ORDEM; j > i; j--)
                {
                    no_atual->chave[j] = no_atual->chave[j - 1];
                    no_atual->ponteiro[j] = no_atual->ponteiro[j - 1];
                }

                //colocar a nova chave e ponteiro na posicao correta

                no_atual->chave[i] = codigo;
                no_atual->ponteiro[i] = pos_dado;
                no_atual->numChaves++;

                int meio = ORDEM / 2;
                // == 2 - CRIAR NOVA PAGINA A ESQUERDA DO NO ATUAL E COPIANDO O VALORES QUE VEM ANTES DO MEIO NELE == //

                noBmais *new = (noBmais *)malloc(sizeof(noBmais));

                new->eh_folha = no_atual->eh_folha;
                new->pai = pai;
                new->numChaves = 0;

                int b;

                for (b = 0; b < ORDEM; b++)
                {
                    if (b < meio)
                    {
                        new->chave[b] = no_atual->chave[b];
                        new->ponteiro[b] = no_atual->ponteiro[b];

                        new->numChaves++;
                    }
                    else
                    {
                        new->chave[b] = -1;
                        new->ponteiro[b] = -1;
                    }
                }

                new->ponteiro[ORDEM - 1] = pos;
                new->ponteiro[ORDEM] = -1;

                // == 3- ARRUMAR O NO_ATUAL == //

                int c;

                for (b = 0, c = meio; b < ORDEM; b++, c++)
                {
                    if (b <= meio)
                    {
                        no_atual->chave[b] = no_atual->chave[c];
                        no_atual->ponteiro[b] = no_atual->ponteiro[c];
                    }
                    else
                    {

                        no_atual->chave[b] = -1;
                        no_atual->ponteiro[b] = -1;
                    }
                }
                no_atual->numChaves = ORDEM - meio;
                no_atual->ponteiro[ORDEM - 1] = no_atual->ponteiro[ORDEM];
                no_atual->ponteiro[ORDEM] = -1;

                // == 4 - ESCREVER O FILHO ATUAL NA SUA POSICAO RECEBIDA PELOS PARAMETROS NO ARQUIVO == //

                escreve_no_codigo(arq, no_atual, pos);

                // == 5 - ESCREVER O NOVO NO (NEW) EM UMA POSICAO LIVRE OU NO TOPO== //

                Cabecalho_BMais *cab = (Cabecalho_BMais *)malloc(sizeof(Cabecalho_BMais));
                cab = le_cabecalho_codigo(arq);

                int pos_new;

                if (cab->pos_livre != -1)
                { //colocar ele na posicao livre
                    pos_new = cab->pos_livre;
                    noBmais *livre = (noBmais *)malloc(sizeof(noBmais));

                    livre = le_no_codigo(arq, cab->pos_livre);

                    cab->pos_livre = livre->eh_folha; //encadeamento de nos excluidos

                    escreve_no_codigo(arq, new, pos_new);
                    escreve_cabecalho_codigo(arq, cab);

                    free(livre);
                    free(cab);
                }
                else
                { //colocar ele no topo
                    pos_new = cab->pos_topo;

                    cab->pos_topo++;

                    escreve_no_codigo(arq, new, pos_new);
                    escreve_cabecalho_codigo(arq, cab);

                    free(cab);
                }

                // == 6 - ARRUMAR O PAI OU CRIAR O PAI (CRIAR SOMENTE SE ESTIVER DANDO SPLIT NA RAIZ) == //

                if (pai != -1)
                { // arruma o pai e retorna -1

                    arruma_pai(arq, pai, no_atual->chave[0], pos_new, pos);

                    return -1;
                }
                else
                { //criar o pai , escreve ele e depois retona sua posicao

                    noBmais *no_pai = (noBmais *)malloc(sizeof(noBmais));
                    Cabecalho_BMais *cab2 = (Cabecalho_BMais *)malloc(sizeof(Cabecalho_BMais));
                    cab2 = le_cabecalho_codigo(arq);

                    no_pai->numChaves = 1;
                    no_pai->chave[0] = no_atual->chave[0]; //colocar o valor do meio anteriormente decidido na cabeca dessa pagina
                    no_pai->eh_folha = 0;
                    no_pai->pai = -1;

                    int b;

                    for (b = 1; b <= ORDEM; b++)
                    {
                        no_pai->chave[b] = -1;
                        no_pai->ponteiro[b] = -1;
                    }

                    no_pai->ponteiro[1] = pos;
                    no_pai->ponteiro[0] = pos_new;

                    int pos_pai;

                    if (cab2->pos_livre != -1)
                    { //colocar o no criado anteriormente na posicao livre
                        pos_pai = cab2->pos_livre;
                        noBmais *livre2 = (noBmais *)malloc(sizeof(noBmais));

                        livre2 = le_no_codigo(arq, cab2->pos_livre);

                        cab2->pos_livre = livre2->eh_folha; //encadeamento de nos excluidos

                        escreve_no_codigo(arq, no_pai, pos_pai);
                        escreve_cabecalho_codigo(arq, cab2);

                        free(livre2);
                        free(cab2);
                    }
                    else
                    { //colocar o no criado anteriormente no top
                        pos_pai = cab2->pos_topo;

                        cab2->pos_topo++;

                        escreve_no_codigo(arq, no_pai, pos_pai);
                        escreve_cabecalho_codigo(arq, cab2);

                        free(cab2);
                    }

                    free(no_pai);

                    return pos_pai;
                }
            }
            else
            { //folha perfeita para adicionar

                int i;
                for (i = 0; i < no_atual->numChaves; i++)
                {
                    if (codigo < no_atual->chave[i])
                        break;
                }
                //atualizar o no movendo as casas para seus novos lugares
                for (int j = no_atual->numChaves; j > i; j--)
                {
                    no_atual->chave[j] = no_atual->chave[j - 1];
                    no_atual->ponteiro[j] = no_atual->ponteiro[j - 1];
                }

                //colocar a nova chave e ponteiro na posicao correta
                no_atual->numChaves++;
                no_atual->chave[i] = codigo;
                no_atual->ponteiro[i] = pos_dado;

                escreve_no_codigo(arq, no_atual, pos);

                return pos;
            }
        }
        else
        { //navegue ate mais baixo

            int i;
            int ponteiro = 0;

            for (i = 0; i < no_atual->numChaves; i++)
            {
                if (codigo < no_atual->chave[i])
                {
                    break;
                }
            }

            int response = insereCodigo_termino(arq, pos, no_atual->ponteiro[i], codigo, pos_dado);

            if (response == -1)
            { //ele foi atualizado , precisa ser lido e se tiver overflow da split , arruma o pai e retorna -1
                no_atual = le_no_codigo(arq, pos);

                if (no_atual->numChaves >= ORDEM)
                { //TEM OVERFLOw

                    int meio = ORDEM / 2;
                    // == 2 - CRIAR NOVA PAGINA A ESQUERDA DO NO ATUAL E COPIANDO O VALORES QUE VEM ANTES DO MEIO NELE == //

                    noBmais *new = (noBmais *)malloc(sizeof(noBmais));

                    new->eh_folha = no_atual->eh_folha;
                    new->pai = pai;

                    int b;

                    for (b = 0; b < ORDEM; b++)
                    {
                        if (b < meio)
                        {
                            new->chave[b] = no_atual->chave[b];
                            new->ponteiro[b] = no_atual->ponteiro[b];

                            new->numChaves++;
                        }
                        else
                        {
                            new->chave[b] = -1;
                            new->ponteiro[b] = -1;
                        }
                    }
                    new->ponteiro[ORDEM] = -1;

                    // == 3- ARRUMAR O NO_ATUAL == //

                    int c;

                    int MEIO_QUE_SOBE = no_atual->chave[meio];

                    for (b = 0, c = meio; b < ORDEM; b++, c++)
                    {
                        if (b < meio - 1)
                        {
                            no_atual->chave[b] = no_atual->chave[c + 1];
                            no_atual->ponteiro[b] = no_atual->ponteiro[c + 1];
                        }
                        else if (b == meio - 1)
                        {
                            no_atual->chave[b] = -1;
                            no_atual->ponteiro[b] = no_atual->ponteiro[c + 1];
                        }
                        else
                        {

                            no_atual->chave[b] = -1;
                            no_atual->ponteiro[b] = -1;
                        }
                    }
                    no_atual->numChaves = ORDEM - meio - 1;
                    no_atual->ponteiro[ORDEM - 1] = no_atual->ponteiro[ORDEM];
                    no_atual->ponteiro[ORDEM] = -1;

                    // == 4 - ESCREVER O FILHO ATUAL NA SUA POSICAO RECEBIDA PELOS PARAMETROS NO ARQUIVO == //

                    escreve_no_codigo(arq, no_atual, pos);

                    // == 5 - ESCREVER O NOVO NO (NEW) EM UMA POSICAO LIVRE OU NO TOPO== //

                    Cabecalho_BMais *cab = (Cabecalho_BMais *)malloc(sizeof(Cabecalho_BMais));
                    cab = le_cabecalho_codigo(arq);

                    int pos_new;

                    if (cab->pos_livre != -1)
                    { //colocar ele na posicao livre
                        pos_new = cab->pos_livre;
                        noBmais *livre = (noBmais *)malloc(sizeof(noBmais));

                        livre = le_no_codigo(arq, cab->pos_livre);

                        cab->pos_livre = livre->eh_folha; //encadeamento de nos excluidos

                        escreve_no_codigo(arq, new, pos_new);
                        escreve_cabecalho_codigo(arq, cab);

                        free(livre);
                        free(cab);
                    }
                    else
                    { //colocar ele no topo
                        pos_new = cab->pos_topo;

                        cab->pos_topo++;

                        escreve_no_codigo(arq, new, pos_new);
                        escreve_cabecalho_codigo(arq, cab);

                        free(cab);
                    }

                    // == 6 - ARRUMAR O PAI OU CRIAR O PAI (CRIAR SOMENTE SE ESTIVER DANDO SPLIT NA RAIZ) == //

                    if (pai != -1)
                    { // arruma o pai e retorna -1

                        arruma_pai(arq, pai, no_atual->chave[0], pos_new, pos);
                        return -1;
                    }
                    else
                    { //criar o pai , escreve ele e depois retona sua posicao

                        noBmais *no_pai = (noBmais *)malloc(sizeof(noBmais));
                        Cabecalho_BMais *cab2 = (Cabecalho_BMais *)malloc(sizeof(Cabecalho_BMais));
                        cab2 = le_cabecalho_codigo(arq);

                        no_pai->numChaves = 1;
                        no_pai->chave[0] = MEIO_QUE_SOBE; //colocar o valor do meio anteriormente decidido na cabeca dessa pagina
                        no_pai->eh_folha = 0;
                        no_pai->pai = -1;

                        int b;

                        for (b = 1; b <= ORDEM; b++)
                        {
                            no_pai->chave[b] = -1;
                            no_pai->ponteiro[b] = -1;
                        }

                        no_pai->ponteiro[1] = pos;
                        no_pai->ponteiro[0] = pos_new;

                        int pos_pai;

                        if (cab2->pos_livre != -1)
                        { //colocar o no criado anteriormente na posicao livre
                            pos_pai = cab2->pos_livre;
                            noBmais *livre2 = (noBmais *)malloc(sizeof(noBmais));

                            livre2 = le_no_codigo(arq, cab2->pos_livre);

                            cab2->pos_livre = livre2->eh_folha; //encadeamento de nos excluidos

                            escreve_no_codigo(arq, no_pai, pos_pai);
                            escreve_cabecalho_codigo(arq, cab2);

                            free(livre2);
                            free(cab2);
                        }
                        else
                        { //colocar o no criado anteriormente no top
                            pos_pai = cab2->pos_topo;

                            cab2->pos_topo++;

                            escreve_no_codigo(arq, no_pai, pos_pai);
                            escreve_cabecalho_codigo(arq, cab2);

                            free(cab2);
                        }

                        free(no_pai);

                        return pos_pai;
                    }
                }
                else
                { //NAO TEM OVERFLOW E NAO PRECISA FAZER SPLIT
                    return pos;
                }
            }
            else
            {

                return pos;
            }
        }
    }
}